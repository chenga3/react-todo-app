{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alanc\\\\Documents\\\\Web Dev\\\\Producktivity\\\\client\\\\src\\\\pages\\\\Todos.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Button from \"../core/Button\";\nimport AddTodo from \"../todos/AddTodo\";\nimport TodoList from \"../todos/TodoList\";\nimport { inMemoryTodoService } from \"../services/todos-service\";\nconst service = inMemoryTodoService(); //const service = localStorageTodoService();\n\nconst Todos = () => {\n  _s();\n\n  const [input, setInput] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  /** Loads stored todos into state on intial render. */\n\n  useEffect(() => {\n    // const fetchedTodos = service.load();\n    // setTodos(fetchedTodos);\n    axios.get(\"http://localhost:5000/api/todos\").then(res => {\n      setTodos(res.data);\n    });\n  }, []);\n  /** Adds the user input todo to their todo list. */\n\n  const addTodo = event => {\n    event.preventDefault();\n    axios.post(\"http://localhost:5000/api/todos\", {\n      text: input,\n      done: false\n    }).then(res => {\n      // Update the todo list client-side\n      const newTodo = {\n        _id: res.data.insertedId,\n        text: input,\n        done: false\n      };\n      setTodos([...todos, newTodo]);\n    }).catch(err => console.log(err));\n    setInput(\"\");\n  };\n  /** Toggles todos between 'done' and 'not done' states. */\n\n\n  const updateTodo = (_id, text, done) => {\n    axios.post(\"http://localhost:5000/api/todos/\" + _id, {\n      text: text,\n      done: !done\n    }).then(res => {\n      // Update the todo client-side\n      setTodos(todos.map(todo => todo._id === _id ? { ...todo,\n        done: !done\n      } : todo));\n    }).catch(err => console.log(err));\n  };\n  /** Deletes all 'done' todos. */\n\n\n  const handleDeleteDone = () => {\n    axios.delete(\"http://localhost:5000/api/todos/done\").then(res => {\n      // Update the todo list client-side\n      setTodos(todos.filter(todo => !todo.done));\n    }).catch(err => console.log(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-2 bg-yellow-light\",\n      children: [/*#__PURE__*/_jsxDEV(TodoList, {\n        todos: todos,\n        onCheck: updateTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddTodo, {\n        input: input,\n        setInput: setInput,\n        addTodo: addTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"Delete All Done\",\n        onClick: handleDeleteDone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Todos, \"T7ELc85DyGrNVkSidAk/ZMz6xQA=\");\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["C:/Users/alanc/Documents/Web Dev/Producktivity/client/src/pages/Todos.tsx"],"names":["React","useState","useEffect","axios","Button","AddTodo","TodoList","inMemoryTodoService","service","Todos","input","setInput","todos","setTodos","get","then","res","data","addTodo","event","preventDefault","post","text","done","newTodo","_id","insertedId","catch","err","console","log","updateTodo","map","todo","handleDeleteDone","delete","filter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Button from \"../core/Button\";\r\nimport AddTodo from \"../todos/AddTodo\";\r\nimport TodoList from \"../todos/TodoList\";\r\nimport { inMemoryTodoService } from \"../services/todos-service\";\r\nimport type { Todo } from \"../types\";\r\n\r\nconst service = inMemoryTodoService();\r\n//const service = localStorageTodoService();\r\n\r\nconst Todos = () => {\r\n  const [input, setInput] = useState<string>(\"\");\r\n  const [todos, setTodos] = useState<Array<Todo>>([]);\r\n\r\n  /** Loads stored todos into state on intial render. */\r\n  useEffect(() => {\r\n    // const fetchedTodos = service.load();\r\n    // setTodos(fetchedTodos);\r\n    axios.get(\"http://localhost:5000/api/todos\").then((res) => {\r\n      setTodos(res.data);\r\n    });\r\n  }, []);\r\n\r\n  /** Adds the user input todo to their todo list. */\r\n  const addTodo = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    axios\r\n      .post(\"http://localhost:5000/api/todos\", {\r\n        text: input,\r\n        done: false,\r\n      })\r\n      .then((res) => {\r\n        // Update the todo list client-side\r\n        const newTodo: Todo = {\r\n          _id: res.data.insertedId,\r\n          text: input,\r\n          done: false,\r\n        };\r\n        setTodos([...todos, newTodo]);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    setInput(\"\");\r\n  };\r\n\r\n  /** Toggles todos between 'done' and 'not done' states. */\r\n  const updateTodo = (_id: number, text: string, done: boolean) => {\r\n    axios\r\n      .post(\"http://localhost:5000/api/todos/\" + _id, {\r\n        text: text,\r\n        done: !done,\r\n      })\r\n      .then((res) => {\r\n        // Update the todo client-side\r\n        setTodos(\r\n          todos.map((todo) =>\r\n            todo._id === _id ? { ...todo, done: !done } : todo\r\n          )\r\n        );\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  /** Deletes all 'done' todos. */\r\n  const handleDeleteDone = () => {\r\n    axios\r\n      .delete(\"http://localhost:5000/api/todos/done\")\r\n      .then((res) => {\r\n        // Update the todo list client-side\r\n        setTodos(todos.filter((todo) => !todo.done));\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Todos</h1>\r\n      <div className=\"grid grid-cols-2 bg-yellow-light\">\r\n        <TodoList todos={todos} onCheck={updateTodo} />\r\n        <AddTodo input={input} setInput={setInput} addTodo={addTodo} />\r\n        <Button label=\"Delete All Done\" onClick={handleDeleteDone} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alanc\\\\Documents\\\\Web Dev\\\\Producktivity\\\\client\\\\src\\\\timer\\\\CountdownTimer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\n\nconst CountdownTimer = ({\n  status,\n  setStatus\n}) => {\n  _s();\n\n  const [timeLeft, setTimeLeft] = useState([-1, -1, -1]);\n  const [startTime, setStartTime] = useState([0, 0, 3]);\n  /** Sets timer status to ON */\n\n  const startTimer = () => {\n    setStatus(\"ON\");\n  };\n  /** Sets timer status to PAUSED */\n\n\n  const pause = () => {\n    setStatus(\"PAUSED\");\n  };\n  /** Sets timer status to OFF */\n\n\n  const reset = () => {\n    setStatus(\"OFF\");\n  };\n\n  useEffect(() => {\n    /** Decrements time left */\n    const countdown = () => {\n      if (timeLeft[0] <= 0 && timeLeft[1] <= 0 && timeLeft[2] <= 0) {\n        // Do nothing\n        return;\n      } else if (timeLeft[0] > 0 && timeLeft[1] === 0 && timeLeft[2] === 0) {\n        // Decrement hour\n        setTimeLeft([timeLeft[0] - 1, 59, 59]);\n      } else if (timeLeft[0] >= 0 && timeLeft[1] > 0 && timeLeft[2] === 0) {\n        // Decrement minute\n        setTimeLeft([timeLeft[0], timeLeft[1] - 1, 59]);\n      } else {\n        // Decrement second\n        setTimeLeft([timeLeft[0], timeLeft[1], timeLeft[2] - 1]);\n      }\n    }; // When the timer is off, time left should equal the start time\n\n\n    if (status === \"OFF\") {\n      setTimeLeft([...startTime]);\n    } // Countdown whenever the timer is on\n\n\n    const timer = setInterval(() => {\n      if (status === \"ON\") {\n        countdown();\n      }\n    }, 1000);\n    return () => clearTimeout(timer); // Avoid overlapping timers\n  }, [startTime, status, timeLeft]);\n  useEffect(() => {\n    /** Checks if time left is 0 */\n    const checkDone = () => {\n      return timeLeft[0] === 0 && timeLeft[1] === 0 && timeLeft[2] === 0;\n    }; // Set status to FINISHED if timer hits 0\n\n\n    if (checkDone()) {\n      setStatus(\"FINISHED\");\n    }\n  }, [timeLeft]);\n  const bgColor = status === \"ON\" ? \"bg-green-dark\" : status === \"PAUSED\" ? \"bg-green-light\" : \"bg-yellow\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Timer is \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-72 py-4 text-7xl text-center rounded-3xl shadow-md \" + bgColor,\n      children: timeLeft.join(\":\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: startTime.join(\":\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CountdownTimer, \"liLVEXer7eufSjsBe5ifHyg0z1g=\");\n\n_c = CountdownTimer;\nexport default CountdownTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"sources":["C:/Users/alanc/Documents/Web Dev/Producktivity/client/src/timer/CountdownTimer.tsx"],"names":["React","useEffect","useState","CountdownTimer","status","setStatus","timeLeft","setTimeLeft","startTime","setStartTime","startTimer","pause","reset","countdown","timer","setInterval","clearTimeout","checkDone","bgColor","join"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\ninterface PropsType {\r\n  status: string;\r\n  setStatus: (status: string) => void;\r\n}\r\n\r\nconst CountdownTimer: React.FC<PropsType> = ({ status, setStatus }) => {\r\n  const [timeLeft, setTimeLeft] = useState<Array<number>>([-1, -1, -1]);\r\n  const [startTime, setStartTime] = useState<Array<number>>([0, 0, 3]);\r\n\r\n  /** Sets timer status to ON */\r\n  const startTimer = () => {\r\n    setStatus(\"ON\");\r\n  };\r\n\r\n  /** Sets timer status to PAUSED */\r\n  const pause = () => {\r\n    setStatus(\"PAUSED\");\r\n  };\r\n\r\n  /** Sets timer status to OFF */\r\n  const reset = () => {\r\n    setStatus(\"OFF\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    /** Decrements time left */\r\n    const countdown = () => {\r\n      if (timeLeft[0] <= 0 && timeLeft[1] <= 0 && timeLeft[2] <= 0) {\r\n        // Do nothing\r\n        return;\r\n      } else if (timeLeft[0] > 0 && timeLeft[1] === 0 && timeLeft[2] === 0) {\r\n        // Decrement hour\r\n        setTimeLeft([timeLeft[0] - 1, 59, 59]);\r\n      } else if (timeLeft[0] >= 0 && timeLeft[1] > 0 && timeLeft[2] === 0) {\r\n        // Decrement minute\r\n        setTimeLeft([timeLeft[0], timeLeft[1] - 1, 59]);\r\n      } else {\r\n        // Decrement second\r\n        setTimeLeft([timeLeft[0], timeLeft[1], timeLeft[2] - 1]);\r\n      }\r\n    };\r\n\r\n    // When the timer is off, time left should equal the start time\r\n    if (status === \"OFF\") {\r\n      setTimeLeft([...startTime]);\r\n    }\r\n\r\n    // Countdown whenever the timer is on\r\n    const timer = setInterval(() => {\r\n      if (status === \"ON\") {\r\n        countdown();\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(timer); // Avoid overlapping timers\r\n  }, [startTime, status, timeLeft]);\r\n\r\n  useEffect(() => {\r\n    /** Checks if time left is 0 */\r\n    const checkDone = () => {\r\n      return timeLeft[0] === 0 && timeLeft[1] === 0 && timeLeft[2] === 0;\r\n    };\r\n\r\n    // Set status to FINISHED if timer hits 0\r\n    if (checkDone()) {\r\n      setStatus(\"FINISHED\");\r\n    }\r\n  }, [timeLeft]);\r\n\r\n  const bgColor =\r\n    status === \"ON\"\r\n      ? \"bg-green-dark\"\r\n      : status === \"PAUSED\"\r\n      ? \"bg-green-light\"\r\n      : \"bg-yellow\";\r\n\r\n  return (\r\n    <div>\r\n      <div>Timer is {status}</div>\r\n      <div\r\n        className={\r\n          \"w-72 py-4 text-7xl text-center rounded-3xl shadow-md \" + bgColor\r\n        }\r\n      >\r\n        {timeLeft.join(\":\")}\r\n      </div>\r\n      <div>{startTime.join(\":\")}</div>\r\n      {/* <button onClick={startTimer}>Start</button>\r\n      <button onClick={pause}>Pause</button>\r\n      <button onClick={reset}>Reset</button> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountdownTimer;\r\n"]},"metadata":{},"sourceType":"module"}
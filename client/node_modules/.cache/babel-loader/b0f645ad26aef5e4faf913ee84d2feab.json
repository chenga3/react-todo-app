{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alanc\\\\Documents\\\\Web Dev\\\\Producktivity\\\\client\\\\src\\\\timer\\\\PomodoroTimer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"../core/Button\";\nimport CountdownTimer from \"./CountdownTimer\";\n\nconst PomodoroTimer = () => {\n  _s();\n\n  const [workTimerStatus, setWorkTimerStatus] = useState(\"OFF\");\n  const [breakTimerStatus, setBreakTimerStatus] = useState(\"OFF\");\n  const [status, setStatus] = useState(\"OFF\");\n  /** Begins with WORK cycle. */\n\n  const start = () => {\n    setStatus(\"WORK\");\n  };\n  /** Resumes timer after being paused. */\n\n\n  const resume = () => {\n    if (workTimerStatus === \"PAUSED\") {\n      setStatus(\"WORK\");\n    } else if (breakTimerStatus === \"PAUSED\") {\n      setStatus(\"BREAK\");\n    }\n  };\n  /** Pauses the timer. */\n\n\n  const pause = () => {\n    setStatus(\"PAUSED\");\n\n    if (status === \"WORK\") {\n      setWorkTimerStatus(\"PAUSED\");\n    } else if (status === \"BREAK\") {\n      setBreakTimerStatus(\"PAUSED\");\n    }\n  };\n  /** Resets the timer. */\n\n\n  const reset = () => {\n    setStatus(\"OFF\");\n  };\n\n  useEffect(() => {\n    // Check if cycle has ended, and switch if so.\n    if (status === \"WORK\") {\n      if (workTimerStatus === \"FINISHED\") {\n        setBreakTimerStatus(\"ON\");\n        setWorkTimerStatus(\"OFF\");\n        setStatus(\"BREAK\");\n      }\n    } else if (status === \"BREAK\") {\n      if (breakTimerStatus === \"FINISHED\") {\n        setWorkTimerStatus(\"ON\");\n        setBreakTimerStatus(\"OFF\");\n        setStatus(\"WORK\");\n      }\n    }\n  }, [status, workTimerStatus, breakTimerStatus]);\n  useEffect(() => {\n    // Ties pomodoro timer status with work/break timer statuses.\n    if (status === \"OFF\") {\n      setWorkTimerStatus(\"OFF\");\n      setBreakTimerStatus(\"OFF\");\n    } else if (status === \"WORK\") {\n      setWorkTimerStatus(\"ON\");\n      setBreakTimerStatus(\"OFF\");\n    } else if (status === \"BREAK\") {\n      setWorkTimerStatus(\"OFF\");\n      setBreakTimerStatus(\"ON\");\n    }\n  }, [status]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Pomodoro timer is in \", status, \" mode\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-8 bg-yellow-light\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row space-x-16\",\n        children: [/*#__PURE__*/_jsxDEV(CountdownTimer, {\n          status: workTimerStatus,\n          setStatus: setWorkTimerStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CountdownTimer, {\n          status: breakTimerStatus,\n          setStatus: setBreakTimerStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), status === \"PAUSED\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          label: \"Start\",\n          onClick: resume\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          label: \"Reset\",\n          onClick: reset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this) : status === \"OFF\" ? /*#__PURE__*/_jsxDEV(Button, {\n        label: \"Start\",\n        onClick: start\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        label: \"Pause\",\n        onClick: pause\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PomodoroTimer, \"xDiX/IeS/Z0sLKODg90PD4XBoGQ=\");\n\n_c = PomodoroTimer;\nexport default PomodoroTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PomodoroTimer\");","map":{"version":3,"sources":["C:/Users/alanc/Documents/Web Dev/Producktivity/client/src/timer/PomodoroTimer.tsx"],"names":["React","useEffect","useState","Button","CountdownTimer","PomodoroTimer","workTimerStatus","setWorkTimerStatus","breakTimerStatus","setBreakTimerStatus","status","setStatus","start","resume","pause","reset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport Button from \"../core/Button\";\r\nimport CountdownTimer from \"./CountdownTimer\";\r\n\r\nconst PomodoroTimer: React.FC = () => {\r\n  const [workTimerStatus, setWorkTimerStatus] = useState<string>(\"OFF\");\r\n  const [breakTimerStatus, setBreakTimerStatus] = useState<string>(\"OFF\");\r\n  const [status, setStatus] = useState<string>(\"OFF\");\r\n\r\n  /** Begins with WORK cycle. */\r\n  const start = () => {\r\n    setStatus(\"WORK\");\r\n  };\r\n\r\n  /** Resumes timer after being paused. */\r\n  const resume = () => {\r\n    if (workTimerStatus === \"PAUSED\") {\r\n      setStatus(\"WORK\");\r\n    } else if (breakTimerStatus === \"PAUSED\") {\r\n      setStatus(\"BREAK\");\r\n    }\r\n  };\r\n\r\n  /** Pauses the timer. */\r\n  const pause = () => {\r\n    setStatus(\"PAUSED\");\r\n    if (status === \"WORK\") {\r\n      setWorkTimerStatus(\"PAUSED\");\r\n    } else if (status === \"BREAK\") {\r\n      setBreakTimerStatus(\"PAUSED\");\r\n    }\r\n  };\r\n\r\n  /** Resets the timer. */\r\n  const reset = () => {\r\n    setStatus(\"OFF\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if cycle has ended, and switch if so.\r\n    if (status === \"WORK\") {\r\n      if (workTimerStatus === \"FINISHED\") {\r\n        setBreakTimerStatus(\"ON\");\r\n        setWorkTimerStatus(\"OFF\");\r\n        setStatus(\"BREAK\");\r\n      }\r\n    } else if (status === \"BREAK\") {\r\n      if (breakTimerStatus === \"FINISHED\") {\r\n        setWorkTimerStatus(\"ON\");\r\n        setBreakTimerStatus(\"OFF\");\r\n        setStatus(\"WORK\");\r\n      }\r\n    }\r\n  }, [status, workTimerStatus, breakTimerStatus]);\r\n\r\n  useEffect(() => {\r\n    // Ties pomodoro timer status with work/break timer statuses.\r\n    if (status === \"OFF\") {\r\n      setWorkTimerStatus(\"OFF\");\r\n      setBreakTimerStatus(\"OFF\");\r\n    } else if (status === \"WORK\") {\r\n      setWorkTimerStatus(\"ON\");\r\n      setBreakTimerStatus(\"OFF\");\r\n    } else if (status === \"BREAK\") {\r\n      setWorkTimerStatus(\"OFF\");\r\n      setBreakTimerStatus(\"ON\");\r\n    }\r\n  }, [status]);\r\n\r\n  return (\r\n    <div>\r\n      <div>Pomodoro timer is in {status} mode</div>\r\n      <div className=\"my-8 bg-yellow-light\">\r\n        <div className=\"flex flex-row space-x-16\">\r\n          <CountdownTimer\r\n            status={workTimerStatus}\r\n            setStatus={setWorkTimerStatus}\r\n          />\r\n          <CountdownTimer\r\n            status={breakTimerStatus}\r\n            setStatus={setBreakTimerStatus}\r\n          />\r\n        </div>\r\n        {status === \"PAUSED\" ? (\r\n          <div>\r\n            <Button label=\"Start\" onClick={resume} />\r\n            <Button label=\"Reset\" onClick={reset} />\r\n          </div>\r\n        ) : status === \"OFF\" ? (\r\n          <Button label=\"Start\" onClick={start} />\r\n        ) : (\r\n          <Button label=\"Pause\" onClick={pause} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PomodoroTimer;\r\n"]},"metadata":{},"sourceType":"module"}